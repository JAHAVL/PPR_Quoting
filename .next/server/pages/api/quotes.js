"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/quotes";
exports.ids = ["pages/api/quotes"];
exports.modules = {

/***/ "better-sqlite3":
/*!*********************************!*\
  !*** external "better-sqlite3" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("better-sqlite3");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closeDb\": () => (/* binding */ closeDb),\n/* harmony export */   \"generateId\": () => (/* binding */ generateId),\n/* harmony export */   \"getDb\": () => (/* binding */ getDb),\n/* harmony export */   \"initDb\": () => (/* binding */ initDb)\n/* harmony export */ });\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(better_sqlite3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Ensure the data directory exists\nconst dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), \"data\");\nif (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dataDir)) {\n    fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dataDir, {\n        recursive: true\n    });\n}\n// Database file path\nconst dbPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, \"ppr-database.sqlite\");\n// Initialize database connection\nlet db;\n// This function ensures we don't create multiple connections\nfunction getDb() {\n    if (!db) {\n        // Using type assertion to fix the constructor type issue\n        db = new (better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default())(dbPath);\n        // Enable foreign keys\n        db.pragma(\"foreign_keys = ON\");\n        // For better performance\n        db.pragma(\"journal_mode = WAL\");\n    }\n    return db;\n}\n// Initialize database schema\nfunction initDb() {\n    const db = getDb();\n    // Create clients table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS clients (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      email TEXT,\n      phone TEXT,\n      address TEXT,\n      joinDate TEXT,\n      status TEXT CHECK(status IN ('active', 'inactive', 'prospect')) NOT NULL DEFAULT 'prospect',\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n    // Create projects table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS projects (\n      id TEXT PRIMARY KEY,\n      clientId TEXT NOT NULL,\n      address TEXT,\n      startDate TEXT,\n      endDate TEXT,\n      total REAL,\n      status TEXT CHECK(status IN ('pending', 'in_progress', 'completed', 'cancelled')) NOT NULL DEFAULT 'pending',\n      type TEXT CHECK(type IN ('Install', 'Mx')),\n      squareFootage INTEGER,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE\n    )\n  `);\n    // Create quotes table with all fields needed by the quote calculator\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS quotes (\n      id TEXT PRIMARY KEY,\n      clientId TEXT NOT NULL,\n      projectId TEXT,\n      title TEXT NOT NULL,\n      description TEXT,\n      date TEXT NOT NULL,\n      expiryDate TEXT,\n      total REAL NOT NULL,\n      status TEXT CHECK(status IN ('draft', 'sent', 'accepted', 'rejected', 'expired')) NOT NULL DEFAULT 'draft',\n      type TEXT CHECK(type IN ('Install', 'Mx')) NOT NULL DEFAULT 'Install',\n      \n      -- Quote calculator specific fields\n      serviceName TEXT,\n      rawServiceCost REAL,\n      paverCost REAL,\n      materialCostDetail REAL,\n      laborCost REAL,\n      installCost REAL,\n      marketingCost REAL,\n      profit REAL,\n      profitMargin REAL,\n      finalCustomerPrice REAL,\n      squareFootage REAL,\n      pricePerSqFt REAL,\n      inputs TEXT, -- JSON string\n      calculations TEXT, -- JSON string\n      lineItems TEXT, -- JSON string\n      \n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,\n      FOREIGN KEY (projectId) REFERENCES projects(id) ON DELETE SET NULL\n    )\n  `);\n    // Create employees table\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS employees (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      email TEXT,\n      phone TEXT,\n      position TEXT,\n      clockHours REAL DEFAULT 0,\n      hireDate TEXT,\n      status TEXT CHECK(status IN ('On', 'Off', 'Out', 'Archived')) NOT NULL DEFAULT 'On',\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n    // Create quote_items table for line items in quotes\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS quote_items (\n      id TEXT PRIMARY KEY,\n      quoteId TEXT NOT NULL,\n      description TEXT NOT NULL,\n      quantity REAL NOT NULL DEFAULT 1,\n      unitPrice REAL NOT NULL,\n      total REAL NOT NULL,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (quoteId) REFERENCES quotes(id) ON DELETE CASCADE\n    )\n  `);\n    // Create project_assignments table to track which employees are assigned to which projects\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS project_assignments (\n      id TEXT PRIMARY KEY,\n      projectId TEXT NOT NULL,\n      employeeId TEXT NOT NULL,\n      role TEXT,\n      hoursLogged REAL DEFAULT 0,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (projectId) REFERENCES projects(id) ON DELETE CASCADE,\n      FOREIGN KEY (employeeId) REFERENCES employees(id) ON DELETE CASCADE,\n      UNIQUE(projectId, employeeId)\n    )\n  `);\n    // Create activities table to track client-related activities and notes\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS activities (\n      id TEXT PRIMARY KEY,\n      clientId TEXT NOT NULL,\n      userId TEXT, -- For future user association, nullable for now\n      type TEXT CHECK(type IN ('system', 'user', 'other')) NOT NULL,\n      content TEXT NOT NULL,\n      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      eventType TEXT CHECK(eventType IN ('quote_accepted', 'quote_created', 'project_status', 'call', 'email', 'note')),\n      details TEXT,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE\n    )\n  `);\n}\n// Helper function to close the database connection\nfunction closeDb() {\n    if (db) {\n        db.close();\n        db = undefined;\n    }\n}\n// Helper to generate UUIDs for IDs\nfunction generateId() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n// Initialize the database on import\ntry {\n    initDb();\n    console.log(\"Database initialized successfully\");\n} catch (error) {\n    console.error(\"Failed to initialize database:\", error);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQ1RhLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDbkQsRUFBRSxPQUFPQyxLQUFLLEVBQUU7SUFDZEYsT0FBTyxDQUFDRSxLQUFLLENBQUMsZ0NBQWdDLEVBQUVBLEtBQUssQ0FBQyxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXZlci1xdW90aW5nLXRvb2wvLi9zcmMvbGliL2RiLnRzPzllNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFiYXNlIGZyb20gJ2JldHRlci1zcWxpdGUzJztcbnR5cGUgRGF0YWJhc2VJbnN0YW5jZSA9IFJldHVyblR5cGU8dHlwZW9mIERhdGFiYXNlPjtcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuLy8gRW5zdXJlIHRoZSBkYXRhIGRpcmVjdG9yeSBleGlzdHNcbmNvbnN0IGRhdGFEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2RhdGEnKTtcbmlmICghZnMuZXhpc3RzU3luYyhkYXRhRGlyKSkge1xuICBmcy5ta2RpclN5bmMoZGF0YURpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG59XG5cbi8vIERhdGFiYXNlIGZpbGUgcGF0aFxuY29uc3QgZGJQYXRoID0gcGF0aC5qb2luKGRhdGFEaXIsICdwcHItZGF0YWJhc2Uuc3FsaXRlJyk7XG5cbi8vIEluaXRpYWxpemUgZGF0YWJhc2UgY29ubmVjdGlvblxubGV0IGRiOiBEYXRhYmFzZUluc3RhbmNlO1xuXG4vLyBUaGlzIGZ1bmN0aW9uIGVuc3VyZXMgd2UgZG9uJ3QgY3JlYXRlIG11bHRpcGxlIGNvbm5lY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGIoKTogRGF0YWJhc2VJbnN0YW5jZSB7XG4gIGlmICghZGIpIHtcbiAgICAvLyBVc2luZyB0eXBlIGFzc2VydGlvbiB0byBmaXggdGhlIGNvbnN0cnVjdG9yIHR5cGUgaXNzdWVcbiAgICBkYiA9IG5ldyAoRGF0YWJhc2UgYXMgYW55KShkYlBhdGgpO1xuICAgIFxuICAgIC8vIEVuYWJsZSBmb3JlaWduIGtleXNcbiAgICBkYi5wcmFnbWEoJ2ZvcmVpZ25fa2V5cyA9IE9OJyk7XG4gICAgXG4gICAgLy8gRm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgIGRiLnByYWdtYSgnam91cm5hbF9tb2RlID0gV0FMJyk7XG4gIH1cbiAgXG4gIHJldHVybiBkYjtcbn1cblxuLy8gSW5pdGlhbGl6ZSBkYXRhYmFzZSBzY2hlbWFcbmV4cG9ydCBmdW5jdGlvbiBpbml0RGIoKTogdm9pZCB7XG4gIGNvbnN0IGRiID0gZ2V0RGIoKTtcbiAgXG4gIC8vIENyZWF0ZSBjbGllbnRzIHRhYmxlXG4gIGRiLmV4ZWMoYFxuICAgIENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGNsaWVudHMgKFxuICAgICAgaWQgVEVYVCBQUklNQVJZIEtFWSxcbiAgICAgIG5hbWUgVEVYVCBOT1QgTlVMTCxcbiAgICAgIGVtYWlsIFRFWFQsXG4gICAgICBwaG9uZSBURVhULFxuICAgICAgYWRkcmVzcyBURVhULFxuICAgICAgam9pbkRhdGUgVEVYVCxcbiAgICAgIHN0YXR1cyBURVhUIENIRUNLKHN0YXR1cyBJTiAoJ2FjdGl2ZScsICdpbmFjdGl2ZScsICdwcm9zcGVjdCcpKSBOT1QgTlVMTCBERUZBVUxUICdwcm9zcGVjdCcsXG4gICAgICBjcmVhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgdXBkYXRlZF9hdCBUSU1FU1RBTVAgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUFxuICAgIClcbiAgYCk7XG4gIFxuICAvLyBDcmVhdGUgcHJvamVjdHMgdGFibGVcbiAgZGIuZXhlYyhgXG4gICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcHJvamVjdHMgKFxuICAgICAgaWQgVEVYVCBQUklNQVJZIEtFWSxcbiAgICAgIGNsaWVudElkIFRFWFQgTk9UIE5VTEwsXG4gICAgICBhZGRyZXNzIFRFWFQsXG4gICAgICBzdGFydERhdGUgVEVYVCxcbiAgICAgIGVuZERhdGUgVEVYVCxcbiAgICAgIHRvdGFsIFJFQUwsXG4gICAgICBzdGF0dXMgVEVYVCBDSEVDSyhzdGF0dXMgSU4gKCdwZW5kaW5nJywgJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdjYW5jZWxsZWQnKSkgTk9UIE5VTEwgREVGQVVMVCAncGVuZGluZycsXG4gICAgICB0eXBlIFRFWFQgQ0hFQ0sodHlwZSBJTiAoJ0luc3RhbGwnLCAnTXgnKSksXG4gICAgICBzcXVhcmVGb290YWdlIElOVEVHRVIsXG4gICAgICBjcmVhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgdXBkYXRlZF9hdCBUSU1FU1RBTVAgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgIEZPUkVJR04gS0VZIChjbGllbnRJZCkgUkVGRVJFTkNFUyBjbGllbnRzKGlkKSBPTiBERUxFVEUgQ0FTQ0FERVxuICAgIClcbiAgYCk7XG4gIFxuICAvLyBDcmVhdGUgcXVvdGVzIHRhYmxlIHdpdGggYWxsIGZpZWxkcyBuZWVkZWQgYnkgdGhlIHF1b3RlIGNhbGN1bGF0b3JcbiAgZGIuZXhlYyhgXG4gICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcXVvdGVzIChcbiAgICAgIGlkIFRFWFQgUFJJTUFSWSBLRVksXG4gICAgICBjbGllbnRJZCBURVhUIE5PVCBOVUxMLFxuICAgICAgcHJvamVjdElkIFRFWFQsXG4gICAgICB0aXRsZSBURVhUIE5PVCBOVUxMLFxuICAgICAgZGVzY3JpcHRpb24gVEVYVCxcbiAgICAgIGRhdGUgVEVYVCBOT1QgTlVMTCxcbiAgICAgIGV4cGlyeURhdGUgVEVYVCxcbiAgICAgIHRvdGFsIFJFQUwgTk9UIE5VTEwsXG4gICAgICBzdGF0dXMgVEVYVCBDSEVDSyhzdGF0dXMgSU4gKCdkcmFmdCcsICdzZW50JywgJ2FjY2VwdGVkJywgJ3JlamVjdGVkJywgJ2V4cGlyZWQnKSkgTk9UIE5VTEwgREVGQVVMVCAnZHJhZnQnLFxuICAgICAgdHlwZSBURVhUIENIRUNLKHR5cGUgSU4gKCdJbnN0YWxsJywgJ014JykpIE5PVCBOVUxMIERFRkFVTFQgJ0luc3RhbGwnLFxuICAgICAgXG4gICAgICAtLSBRdW90ZSBjYWxjdWxhdG9yIHNwZWNpZmljIGZpZWxkc1xuICAgICAgc2VydmljZU5hbWUgVEVYVCxcbiAgICAgIHJhd1NlcnZpY2VDb3N0IFJFQUwsXG4gICAgICBwYXZlckNvc3QgUkVBTCxcbiAgICAgIG1hdGVyaWFsQ29zdERldGFpbCBSRUFMLFxuICAgICAgbGFib3JDb3N0IFJFQUwsXG4gICAgICBpbnN0YWxsQ29zdCBSRUFMLFxuICAgICAgbWFya2V0aW5nQ29zdCBSRUFMLFxuICAgICAgcHJvZml0IFJFQUwsXG4gICAgICBwcm9maXRNYXJnaW4gUkVBTCxcbiAgICAgIGZpbmFsQ3VzdG9tZXJQcmljZSBSRUFMLFxuICAgICAgc3F1YXJlRm9vdGFnZSBSRUFMLFxuICAgICAgcHJpY2VQZXJTcUZ0IFJFQUwsXG4gICAgICBpbnB1dHMgVEVYVCwgLS0gSlNPTiBzdHJpbmdcbiAgICAgIGNhbGN1bGF0aW9ucyBURVhULCAtLSBKU09OIHN0cmluZ1xuICAgICAgbGluZUl0ZW1zIFRFWFQsIC0tIEpTT04gc3RyaW5nXG4gICAgICBcbiAgICAgIGNyZWF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICB1cGRhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgRk9SRUlHTiBLRVkgKGNsaWVudElkKSBSRUZFUkVOQ0VTIGNsaWVudHMoaWQpIE9OIERFTEVURSBDQVNDQURFLFxuICAgICAgRk9SRUlHTiBLRVkgKHByb2plY3RJZCkgUkVGRVJFTkNFUyBwcm9qZWN0cyhpZCkgT04gREVMRVRFIFNFVCBOVUxMXG4gICAgKVxuICBgKTtcbiAgXG4gIC8vIENyZWF0ZSBlbXBsb3llZXMgdGFibGVcbiAgZGIuZXhlYyhgXG4gICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgZW1wbG95ZWVzIChcbiAgICAgIGlkIFRFWFQgUFJJTUFSWSBLRVksXG4gICAgICBuYW1lIFRFWFQgTk9UIE5VTEwsXG4gICAgICBlbWFpbCBURVhULFxuICAgICAgcGhvbmUgVEVYVCxcbiAgICAgIHBvc2l0aW9uIFRFWFQsXG4gICAgICBjbG9ja0hvdXJzIFJFQUwgREVGQVVMVCAwLFxuICAgICAgaGlyZURhdGUgVEVYVCxcbiAgICAgIHN0YXR1cyBURVhUIENIRUNLKHN0YXR1cyBJTiAoJ09uJywgJ09mZicsICdPdXQnLCAnQXJjaGl2ZWQnKSkgTk9UIE5VTEwgREVGQVVMVCAnT24nLFxuICAgICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVBcbiAgICApXG4gIGApO1xuICBcbiAgLy8gQ3JlYXRlIHF1b3RlX2l0ZW1zIHRhYmxlIGZvciBsaW5lIGl0ZW1zIGluIHF1b3Rlc1xuICBkYi5leGVjKGBcbiAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBxdW90ZV9pdGVtcyAoXG4gICAgICBpZCBURVhUIFBSSU1BUlkgS0VZLFxuICAgICAgcXVvdGVJZCBURVhUIE5PVCBOVUxMLFxuICAgICAgZGVzY3JpcHRpb24gVEVYVCBOT1QgTlVMTCxcbiAgICAgIHF1YW50aXR5IFJFQUwgTk9UIE5VTEwgREVGQVVMVCAxLFxuICAgICAgdW5pdFByaWNlIFJFQUwgTk9UIE5VTEwsXG4gICAgICB0b3RhbCBSRUFMIE5PVCBOVUxMLFxuICAgICAgY3JlYXRlZF9hdCBUSU1FU1RBTVAgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICBGT1JFSUdOIEtFWSAocXVvdGVJZCkgUkVGRVJFTkNFUyBxdW90ZXMoaWQpIE9OIERFTEVURSBDQVNDQURFXG4gICAgKVxuICBgKTtcbiAgXG4gIC8vIENyZWF0ZSBwcm9qZWN0X2Fzc2lnbm1lbnRzIHRhYmxlIHRvIHRyYWNrIHdoaWNoIGVtcGxveWVlcyBhcmUgYXNzaWduZWQgdG8gd2hpY2ggcHJvamVjdHNcbiAgZGIuZXhlYyhgXG4gICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcHJvamVjdF9hc3NpZ25tZW50cyAoXG4gICAgICBpZCBURVhUIFBSSU1BUlkgS0VZLFxuICAgICAgcHJvamVjdElkIFRFWFQgTk9UIE5VTEwsXG4gICAgICBlbXBsb3llZUlkIFRFWFQgTk9UIE5VTEwsXG4gICAgICByb2xlIFRFWFQsXG4gICAgICBob3Vyc0xvZ2dlZCBSRUFMIERFRkFVTFQgMCxcbiAgICAgIGNyZWF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICB1cGRhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgRk9SRUlHTiBLRVkgKHByb2plY3RJZCkgUkVGRVJFTkNFUyBwcm9qZWN0cyhpZCkgT04gREVMRVRFIENBU0NBREUsXG4gICAgICBGT1JFSUdOIEtFWSAoZW1wbG95ZWVJZCkgUkVGRVJFTkNFUyBlbXBsb3llZXMoaWQpIE9OIERFTEVURSBDQVNDQURFLFxuICAgICAgVU5JUVVFKHByb2plY3RJZCwgZW1wbG95ZWVJZClcbiAgICApXG4gIGApO1xuICBcbiAgLy8gQ3JlYXRlIGFjdGl2aXRpZXMgdGFibGUgdG8gdHJhY2sgY2xpZW50LXJlbGF0ZWQgYWN0aXZpdGllcyBhbmQgbm90ZXNcbiAgZGIuZXhlYyhgXG4gICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYWN0aXZpdGllcyAoXG4gICAgICBpZCBURVhUIFBSSU1BUlkgS0VZLFxuICAgICAgY2xpZW50SWQgVEVYVCBOT1QgTlVMTCxcbiAgICAgIHVzZXJJZCBURVhULCAtLSBGb3IgZnV0dXJlIHVzZXIgYXNzb2NpYXRpb24sIG51bGxhYmxlIGZvciBub3dcbiAgICAgIHR5cGUgVEVYVCBDSEVDSyh0eXBlIElOICgnc3lzdGVtJywgJ3VzZXInLCAnb3RoZXInKSkgTk9UIE5VTEwsXG4gICAgICBjb250ZW50IFRFWFQgTk9UIE5VTEwsXG4gICAgICB0aW1lc3RhbXAgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICBldmVudFR5cGUgVEVYVCBDSEVDSyhldmVudFR5cGUgSU4gKCdxdW90ZV9hY2NlcHRlZCcsICdxdW90ZV9jcmVhdGVkJywgJ3Byb2plY3Rfc3RhdHVzJywgJ2NhbGwnLCAnZW1haWwnLCAnbm90ZScpKSxcbiAgICAgIGRldGFpbHMgVEVYVCxcbiAgICAgIGNyZWF0ZWRfYXQgVElNRVNUQU1QIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICB1cGRhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgRk9SRUlHTiBLRVkgKGNsaWVudElkKSBSRUZFUkVOQ0VTIGNsaWVudHMoaWQpIE9OIERFTEVURSBDQVNDQURFXG4gICAgKVxuICBgKTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNsb3NlIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VEYigpOiB2b2lkIHtcbiAgaWYgKGRiKSB7XG4gICAgZGIuY2xvc2UoKTtcbiAgICBkYiA9IHVuZGVmaW5lZCBhcyBhbnk7XG4gIH1cbn1cblxuLy8gSGVscGVyIHRvIGdlbmVyYXRlIFVVSURzIGZvciBJRHNcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUlkKCk6IHN0cmluZyB7XG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gIH0pO1xufVxuXG4vLyBJbml0aWFsaXplIHRoZSBkYXRhYmFzZSBvbiBpbXBvcnRcbnRyeSB7XG4gIGluaXREYigpO1xuICBjb25zb2xlLmxvZygnRGF0YWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZTonLCBlcnJvcik7XG59XG4iXSwibmFtZXMiOlsiRGF0YWJhc2UiLCJwYXRoIiwiZnMiLCJkYXRhRGlyIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwiZGJQYXRoIiwiZGIiLCJnZXREYiIsInByYWdtYSIsImluaXREYiIsImV4ZWMiLCJjbG9zZURiIiwiY2xvc2UiLCJ1bmRlZmluZWQiLCJnZW5lcmF0ZUlkIiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/db.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/quotes/index.ts":
/*!***************************************!*\
  !*** ./src/pages/api/quotes/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api)/./src/lib/db.ts\");\n\nfunction handler(req, res) {\n    // Add detailed logging for debugging\n    console.log(\"Quotes API called with method:\", req.method);\n    try {\n        const db = (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.getDb)();\n        switch(req.method){\n            case \"GET\":\n                // Get all quotes with client information\n                console.log(\"GET /api/quotes - Fetching all quotes\");\n                const quotes = db.prepare(`\n          SELECT q.*, c.name as clientName \n          FROM quotes q\n          LEFT JOIN clients c ON q.clientId = c.id\n          ORDER BY q.date DESC\n        `).all();\n                console.log(`GET /api/quotes - Found ${quotes.length} quotes`);\n                // Log the first few quotes with their client IDs for debugging\n                quotes.slice(0, 3).forEach((q)=>{\n                    console.log(`Quote ID: ${q.id}, Client ID: ${q.clientId}, Title: ${q.title}`);\n                });\n                return res.status(200).json(quotes);\n            case \"POST\":\n                // Create a new quote with all calculator fields\n                console.log(\"POST request body:\", JSON.stringify(req.body, null, 2));\n                const { clientId , projectId , title , description , date , expiryDate , total , status , type , // Quote calculator specific fields\n                serviceName , rawServiceCost , paverCost , materialCostDetail , laborCost , installCost , marketingCost , profit , profitMargin , finalCustomerPrice , squareFootage , pricePerSqFt , inputs , calculations , lineItems  } = req.body;\n                console.log(\"Extracted fields:\", {\n                    clientId,\n                    title,\n                    total,\n                    serviceName,\n                    rawServiceCost,\n                    paverCost,\n                    inputs: typeof inputs,\n                    calculations: typeof calculations,\n                    lineItems: typeof lineItems\n                });\n                if (!clientId || !title || !total) {\n                    console.log(\"Validation failed:\", {\n                        clientId,\n                        title,\n                        total\n                    });\n                    return res.status(400).json({\n                        error: \"Client ID, title, and total are required\"\n                    });\n                }\n                // Check if client exists\n                const clientExists = db.prepare(\"SELECT id FROM clients WHERE id = ?\").get(clientId);\n                console.log(\"Client check:\", {\n                    clientId,\n                    exists: !!clientExists\n                });\n                if (!clientExists) {\n                    return res.status(400).json({\n                        error: \"Client not found\"\n                    });\n                }\n                // Check if project exists if provided\n                if (projectId) {\n                    const projectExists = db.prepare(\"SELECT id FROM projects WHERE id = ?\").get(projectId);\n                    if (!projectExists) {\n                        return res.status(400).json({\n                            error: \"Project not found\"\n                        });\n                    }\n                }\n                const id = (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.generateId)();\n                const quoteDate = date || new Date().toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n                // Updated SQL to include all calculator fields\n                const insertQuote = db.prepare(`\n          INSERT INTO quotes (\n            id, clientId, projectId, title, description, date, expiryDate, total, status, type,\n            serviceName, rawServiceCost, paverCost, materialCostDetail, laborCost, \n            installCost, marketingCost, profit, profitMargin, finalCustomerPrice, \n            squareFootage, pricePerSqFt, inputs, calculations, lineItems\n          )\n          VALUES (\n            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\n            ?, ?, ?, ?, ?, \n            ?, ?, ?, ?, ?, \n            ?, ?, ?, ?, ?\n          )\n        `);\n                // Convert JSON objects to strings if they're not already\n                const inputsStr = typeof inputs === \"object\" ? JSON.stringify(inputs) : inputs;\n                const calculationsStr = typeof calculations === \"object\" ? JSON.stringify(calculations) : calculations;\n                const lineItemsStr = typeof lineItems === \"object\" ? JSON.stringify(lineItems) : lineItems;\n                console.log(\"JSON fields after processing:\", {\n                    inputsStr: typeof inputsStr,\n                    calculationsStr: typeof calculationsStr,\n                    lineItemsStr: typeof lineItemsStr\n                });\n                // Ensure type is one of the allowed values in the database schema\n                const validType = type === \"Mx\" ? \"Mx\" : \"Install\"; // Default to 'Install' if not 'Mx'\n                insertQuote.run(id, clientId, projectId || null, title, description || null, quoteDate, expiryDate || null, total, status || \"draft\", validType, // Quote calculator specific fields\n                serviceName || null, rawServiceCost || null, paverCost || null, materialCostDetail || null, laborCost || null, installCost || null, marketingCost || null, profit || null, profitMargin || null, finalCustomerPrice || null, squareFootage || null, pricePerSqFt || null, inputsStr || null, calculationsStr || null, lineItemsStr || null);\n                const newQuote = db.prepare(`\n          SELECT q.*, c.name as clientName \n          FROM quotes q\n          LEFT JOIN clients c ON q.clientId = c.id\n          WHERE q.id = ?\n        `).get(id);\n                console.log(\"Quote created successfully:\", {\n                    id: newQuote.id,\n                    title: newQuote.title\n                });\n                return res.status(201).json(newQuote);\n            default:\n                res.setHeader(\"Allow\", [\n                    \"GET\",\n                    \"POST\"\n                ]);\n                return res.status(405).json({\n                    error: `Method ${req.method} Not Allowed`\n                });\n        }\n    } catch (error) {\n        console.error(\"API error:\", error);\n        console.error(\"Error details:\", error instanceof Error ? error.message : \"Unknown error\");\n        console.error(\"Error stack:\", error instanceof Error ? error.stack : \"No stack trace\");\n        return res.status(500).json({\n            error: \"Internal Server Error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/quotes/index.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/quotes/index.ts"));
module.exports = __webpack_exports__;

})();